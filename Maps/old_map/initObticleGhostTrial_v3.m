function initObticleGhostTrial_v3(continueTrial)

%% Global value
globalDefinitions;
global doesGhostMove;doesGhostMove = 1;
global randomfig;
global NumOfTrials;
global NumOfError;
global NumOfSuccess;
global EndReward; 


ghostNumber = 1;
ghostActive=0;
ghostEndPosition = 1;

% totally_random = 0, play the game block by block; totally_random = 1, play the game randomly
totally_random =1;

if (continueTrial ==0)
% Block by block
if totally_random == 0
    if mod(NumOfTrials,10)==0 && NumOfTrials ~=0
        switch randomfig
            case 0
                show_online(['Down block, Correct number/error/total = ',num2str([NumOfSuccess NumOfError NumOfTrials (NumOfSuccess/NumOfTrials)]),'/',num2str(datestr(now,0))]);
            case 1
                show_online(['Up block, Correct number/error/total = ',num2str([NumOfSuccess NumOfError NumOfTrials (NumOfSuccess/NumOfTrials)]),'/',num2str(datestr(now,0))]);
            case 2
                show_online(['Left block, Correct number/error/total = ',num2str([NumOfSuccess NumOfError NumOfTrials (NumOfSuccess/NumOfTrials)]),'/',num2str(datestr(now,0))]);
            case 3 
                show_online(['Right block, Correct number/error/total = ',num2str([NumOfSuccess NumOfError NumOfTrials (NumOfSuccess/NumOfTrials)]),'/',num2str(datestr(now,0))]);
        end
        if NumOfSuccess/NumOfTrials > 0.5
            if randomfig < 3
                randomfig = 1 + randomfig;
            else randomfig = 0;
            end
        end
        NumOfTrials=0;
        NumOfSuccess=0;
        NumOfError=0;
   end
% Randomly
else 
    randomfig = randi([0 3]);
    if mod(NumOfTrials,10)==0
        show_online(['Correct number/error/total = ',num2str([NumOfSuccess NumOfError NumOfTrials (NumOfSuccess/NumOfTrials)]),'/',num2str(datestr(now,0))]);
        NumOfTrials=0;
        NumOfSuccess=0;
        NumOfError=0;
    end
end

    %% initialize gameMap    
    switch randomfig
        %% The map's type depends on it's turning point
        %% Down map
        case 0 
        EndReward = 8;
        startTile(:,1) = [8;5];
        endTile(:,1) = [10;15];
        pacMan.tile = struct('x',20,'y',10);
        constructMap(28,36, [ ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '______|||||||||||||||_______' ...
        '______|             |_______' ...
        '______| ||||| ||||| |_______' ...
        '______|.|   | |   | |_______' ...
        '______|.|   | |   | |_______' ...
        '______| |   | |   | |_______' ...
        '______|.|   | |   | |_______' ...
        '______|.|   | |   |.|_______' ...
        '______|.|   | |   |.|_______' ...
        '______| |   | |   | |_______' ...
        '______| ||||| |||||.|_______' ...
        '______|        ..  .|_______' ...
        '______|||||||||||||||_______' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________']);
        
        NumOfTrials=NumOfTrials+1;
        
        % Ghost settings
        ghost = struct( ...
        'id', 1, ...
        'dir', struct('x',1,'y',0), ...
        'dirEnum', 0, ...
        'mode', 0, ...
        'targeting', 0, ...
        'scared', 0, ...
        'sigReverse', 0, ...
        'sigLeaveHome', 0, ...
        'faceDirEnum', 0, ...
        'pixel', struct('x',0,'y',0), ...        % pixel position
        'tile', struct('x',1,'y',1), ...         % tile position
        'tilePixel', struct('x',0,'y',0), ...    % pixel location inside tile
        'distToMid', struct('x',0,'y',0), ...    % pixel distance to mid-tile
        'targetTile', struct('x',0,'y',0), ...   % tile position used for targeting
        'frames', 0);                            % frame count

        ghosts = ghost;
        
        for g=1:ghostNumber
            ghosts(g).id = g;
            ghosts(g).mode = GHOST_OUTSIDE;
            ghosts(g).color = GHOST_COLOR{g};
            ghosts(g).tile.x = startTile(1,g);
            ghosts(g).tile.y = startTile(2,g);
            ghosts(g).pixel.x = (startTile(1,g)-1)*tileSize + midTile.x;
            ghosts(g).pixel.y = (startTile(2,g)-1)*tileSize + midTile.y;
            ghosts(g).startPixel = ghosts(g).pixel;
            ghosts(g).endpixel.x = (endTile(1,g)-1)*tileSize + midTile.x; %
            ghosts(g).endpixel.y = (endTile(2,g)-1)*tileSize + midTile.y; %
            ghosts(g).dirEnum = DIR_DOWN;
            ghosts(g).dir = setDirFromEnum(ghosts(g).dirEnum);
            ghosts(g).faceDirEnum = ghosts(g).dirEnum;
        end
        
        %% Up map
        case 1 
        EndReward = 8;
        startTile(:,1) = [8;15];
        endTile(:,1) = [10,5];
        pacMan.tile = struct('x',20,'y',10);
        constructMap(28,36, [ ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '______|||||||||||||||_______' ...
        '______|        . . .|_______' ...
        '______|.||||| ||||| |_______' ...
        '______| |   | |   |.|_______' ...
        '______|.|   | |   |.|_______' ...
        '______|.|   | |   | |_______' ...
        '______| |   | |   | |_______' ...
        '______|.|   | |   | |_______' ...
        '______| |   | |   | |_______' ...
        '______|.|   | |   | |_______' ...
        '______| ||||| ||||| |_______' ...
        '______|             |_______' ...
        '______|||||||||||||||_______' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________']);
        NumOfTrials=NumOfTrials+1;
    
        % Ghost settings
        ghost = struct( ...
        'id', 1, ...
        'dir', struct('x',1,'y',0), ...
        'dirEnum', 0, ...
        'mode', 0, ...
        'targeting', 0, ...
        'scared', 0, ...
        'sigReverse', 0, ...
        'sigLeaveHome', 0, ...
        'faceDirEnum', 0, ...
        'pixel', struct('x',0,'y',0), ...        % pixel position
        'tile', struct('x',1,'y',1), ...         % tile position
        'tilePixel', struct('x',0,'y',0), ...    % pixel location inside tile
        'distToMid', struct('x',0,'y',0), ...    % pixel distance to mid-tile
        'targetTile', struct('x',0,'y',0), ...   % tile position used for targeting
        'frames', 0);                            % frame count

         ghosts = ghost;


        for g=1:ghostNumber
            ghosts(g).id = g;
            ghosts(g).mode = GHOST_OUTSIDE;
            ghosts(g).color = GHOST_COLOR{g};
            ghosts(g).tile.x = startTile(1,g);
            ghosts(g).tile.y = startTile(2,g);
            ghosts(g).pixel.x = (startTile(1,g)-1)*tileSize + midTile.x;
            ghosts(g).pixel.y = (startTile(2,g)-1)*tileSize + midTile.y;
            ghosts(g).startPixel = ghosts(g).pixel;
            ghosts(g).endpixel.x = (endTile(1,g)-1)*tileSize + midTile.x; %
            ghosts(g).endpixel.y = (endTile(2,g)-1)*tileSize + midTile.y; %
            ghosts(g).dirEnum = DIR_UP;
            ghosts(g).dir = setDirFromEnum(ghosts(g).dirEnum);
            ghosts(g).faceDirEnum = ghosts(g).dirEnum;

        end
        
        %% Left map
        case 2
        EndReward = 8;
        startTile(:,1) = [19;4];
        endTile(:,1) = [9,6];
        pacMan.tile = struct('x',14,'y',17);
        constructMap(28,36, [ ...
        '____________________________' ...
        '____________________________' ...
        '_______|||||||||||||________' ...
        '_______| ... .  .  |________' ...
        '_______| ||||||||| |________' ...
        '_______| |       | |________' ...
        '_______| |       | |________' ...
        '_______| |       | |________' ...
        '_______| |       | |________' ...
        '_______| ||||||||| |________' ...
        '_______|           |________' ...
        '_______| ||||||||| |________' ...
        '_______|.|       | |________' ...
        '_______|.|       | |________' ...
        '_______| |       | |________' ...
        '_______|.||||||||| |________' ...
        '_______|. ..       |________' ...
        '_______|||||||||||||________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________' ...
        '____________________________']);
    
        NumOfTrials=NumOfTrials+1;
        
        % Ghost settings
        ghost = struct( ...
        'id', 1, ...
        'dir', struct('x',1,'y',0), ...
        'dirEnum', 0, ...
        'mode', 0, ...
        'targeting', 0, ...
        'scared', 0, ...
        'sigReverse', 0, ...
        'sigLeaveHome', 0, ...
        'faceDirEnum', 0, ...
        'pixel', struct('x',0,'y',0), ...        % pixel position
        'tile', struct('x',1,'y',1), ...         % tile position
        'tilePixel', struct('x',0,'y',0), ...    % pixel location inside tile
        'distToMid', struct('x',0,'y',0), ...    % pixel distance to mid-tile
        'targetTile', struct('x',0,'y',0), ...   % tile position used for targeting
        'frames', 0);                            % frame count
            
         ghosts = ghost;
         
         for g=1:ghostNumber
             ghosts(g).id = g;
             ghosts(g).mode = GHOST_OUTSIDE;
             ghosts(g).color = GHOST_COLOR{g};
             ghosts(g).tile.x = startTile(1,g);
             ghosts(g).tile.y = startTile(2,g);
             ghosts(g).pixel.x = (startTile(1,g)-1)*tileSize + midTile.x;
             ghosts(g).pixel.y = (startTile(2,g)-1)*tileSize + midTile.y;
             ghosts(g).startPixel = ghosts(g).pixel;
             ghosts(g).endpixel.x = (endTile(1,g)-1)*tileSize + midTile.x; %
             ghosts(g).endpixel.y = (endTile(2,g)-1)*tileSize + midTile.y; %
             ghosts(g).dirEnum = DIR_LEFT;
             ghosts(g).dir = setDirFromEnum(ghosts(g).dirEnum);
             ghosts(g).faceDirEnum = ghosts(g).dirEnum;
         end
         
         %% Right map
        case 3
         EndReward = 8;
         startTile(:,1) = [9;4];
         endTile(:,1) = [19,6];
         pacMan.tile = struct('x',14,'y',17);
         constructMap(28,36, [ ...
         '____________________________' ...
         '____________________________' ...
         '_______|||||||||||||________' ...
         '_______|..  .. ..  |________' ...
         '_______| ||||||||| |________' ...
         '_______| |       | |________' ...
         '_______| |       | |________' ...
         '_______| |       | |________' ...
         '_______| |       | |________' ...
         '_______| ||||||||| |________' ...
         '_______|           |________' ...
         '_______| |||||||||.|________' ...
         '_______| |       | |________' ...
         '_______| |       |.|________' ...
         '_______| |       |.|________' ...
         '_______| ||||||||| |________' ...
         '_______|      .. . |________' ...
         '_______|||||||||||||________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________' ...
         '____________________________']);
          
         NumOfTrials=NumOfTrials+1;
            
         % Ghost settings
         ghost = struct( ...
         'id', 1, ...
         'dir', struct('x',1,'y',0), ...
         'dirEnum', 0, ...
         'mode', 0, ...
         'targeting', 0, ...
         'scared', 0, ...
         'sigReverse', 0, ...
         'sigLeaveHome', 0, ...
         'faceDirEnum', 0, ...
         'pixel', struct('x',0,'y',0), ...        % pixel position
         'tile', struct('x',1,'y',1), ...         % tile position
         'tilePixel', struct('x',0,'y',0), ...    % pixel location inside tile
         'distToMid', struct('x',0,'y',0), ...    % pixel distance to mid-tile
         'targetTile', struct('x',0,'y',0), ...   % tile position used for targeting
         'frames', 0);                            % frame count
            
          ghosts = ghost;
            
          for g=1:ghostNumber
              ghosts(g).id = g;
              ghosts(g).mode = GHOST_OUTSIDE;
              ghosts(g).color = GHOST_COLOR{g};
              ghosts(g).tile.x = startTile(1,g);
              ghosts(g).tile.y = startTile(2,g);
              ghosts(g).pixel.x = (startTile(1,g)-1)*tileSize + midTile.x;
              ghosts(g).pixel.y = (startTile(2,g)-1)*tileSize + midTile.y;
              ghosts(g).startPixel = ghosts(g).pixel;
              ghosts(g).endpixel.x = (endTile(1,g)-1)*tileSize + midTile.x; %
              ghosts(g).endpixel.y = (endTile(2,g)-1)*tileSize + midTile.y; %
              ghosts(g).dirEnum = DIR_RIGHT;
              ghosts(g).dir = setDirFromEnum(ghosts(g).dirEnum);
              ghosts(g).faceDirEnum = ghosts(g).dirEnum;

          end
    end
    
    
    % Pacman settings
    pacMan.color = [1 1 0 0.8];
    pacMan.flipPerTile = tileSize / flipInterval;
    pacMan.step = 0;
    pacMan.numSteps = 10;
    pacMan.angle = 300;
    pacMan.frames = 0;
    pacMan.eatPauseFramesLeft = 0;
    pacMan.pixel = struct('x',(pacMan.tile.x)*tileSize-midTile.x+1,'y',(pacMan.tile.y-1)*tileSize+midTile.y);
    pacMan.dirEnum = -1;
    pacMan.nextDirEnum = -1;
    pacMan.dir = setDirFromEnum(-1);
    pacMan.distToMid = struct('x', 0, 'y', 10);
    pacMan.tilePixel = struct('x', -1, 'y', -1);
    
    energizerInit;
    fruitInit;

%% continue a trial after PacMan is dead    
else 
    EndReward = 2;
    % Block by block
    if totally_random == 0
        if mod(NumOfTrials,10)==0 && NumOfTrials ~=0       
            switch randomfig
                case 0
                    show_online(['Down block, Correct number/error/total = ',num2str([NumOfSuccess NumOfError NumOfTrials (NumOfSuccess/NumOfTrials)]),'/',num2str(datestr(now,0))]);
                case 1
                    show_online(['Up block, Correct number/error/total = ',num2str([NumOfSuccess NumOfError NumOfTrials (NumOfSuccess/NumOfTrials)]),'/',num2str(datestr(now,0))]);
                case 2
                    show_online(['Left block, Correct number/error/total = ',num2str([NumOfSuccess NumOfError NumOfTrials (NumOfSuccess/NumOfTrials)]),'/',num2str(datestr(now,0))]);
                case 3 
                    show_online(['Right block, Correct number/error/total = ',num2str([NumOfSuccess NumOfError NumOfTrials (NumOfSuccess/NumOfTrials)]),'/',num2str(datestr(now,0))]);
            end
            if NumOfSuccess/NumOfTrials > 0.5
                if randomfig < 3
                    randomfig = 1 + randomfig;
                else randomfig = 0;
                end
            end
            NumOfTrials=0;
            NumOfSuccess=0;
            NumOfError=0;
       end
    % Randomly
    else 
        if mod(NumOfTrials,10)==0
            show_online(['Correct number/error/total = ',num2str([NumOfSuccess NumOfError NumOfTrials (NumOfSuccess/NumOfTrials)]),'/',num2str(datestr(now,0))]);
            NumOfTrials=0;
            NumOfSuccess=0;
            NumOfError=0;
        end
    end
    NumOfTrials=NumOfTrials+1;
    switch randomfig
        case 0
            startTile(:,1) = [8;5];
            endTile(:,1) = [10;15];
            pacMan.tile = struct('x',20,'y',10);
        case 1
            startTile(:,1) = [8;15];
            endTile(:,1) = [10,5];
            pacMan.tile = struct('x',20,'y',10);
        case 2
            startTile(:,1) = [19;4];
            endTile(:,1) = [9,6];
            pacMan.tile = struct('x',14,'y',17);
        case 3
            startTile(:,1) = [9;4];
            endTile(:,1) = [19,6];
            pacMan.tile = struct('x',14,'y',17);
    end
    
    % Ghost settings
    for g=1:ghostNumber
        ghosts(g).id = g;
        ghosts(g).mode = GHOST_OUTSIDE;  
        ghosts(g).color = GHOST_COLOR{g};
        ghosts(g).tile.x = startTile(1,g);
        ghosts(g).tile.y = startTile(2,g);
        ghosts(g).pixel.x = (startTile(1,g)-1)*tileSize + midTile.x;
        ghosts(g).pixel.y = (startTile(2,g)-1)*tileSize + midTile.y;
        ghosts(g).startPixel = ghosts(g).pixel;
        ghosts(g).endpixel.x = (endTile(1,g)-1)*tileSize + midTile.x; %
        ghosts(g).endpixel.y = (endTile(2,g)-1)*tileSize + midTile.y; %
        switch randomfig
            case 0
                ghosts(g).dirEnum = DIR_DOWN;
            case 1
                ghosts(g).dirEnum = DIR_UP;
            case 2
                ghosts(g).dirEnum = DIR_LEFT;
            case 3
                ghosts(g).dirEnum = DIR_RIGHT;
        end
        ghosts(g).dir = setDirFromEnum(ghosts(g).dirEnum);
        ghosts(g).faceDirEnum = ghosts(g).dirEnum;
    end
    
    % Pacman settings
    pacMan.pixel = struct('x',(pacMan.tile.x)*tileSize-midTile.x+1,'y',(pacMan.tile.y-1)*tileSize+midTile.y);
    pacMan.dirEnum = -1;
    pacMan.nextDirEnum = -1;
    pacMan.dir = setDirFromEnum(-1);
    
    energizerInit;
    fruitInit;
end